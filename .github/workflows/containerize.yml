name: Containerize
on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  containerize:
    name: containerize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest ORT repo
        uses: actions/checkout@v3
        with:
          repository: oss-review-toolkit/ort

      - name: Inspect result
        run: ls -la

      - name: Store repo SHA in variable
        run: echo "ORT_SHA=$(/usr/bin/git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Lowercase image name based on repo
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Shorten repo SHA
        run: echo "REPO_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Store date in variable
        run: echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=builder-sha-${{ env.REPO_SHA }}
            type=raw,value=date-${{ env.DATE }}
            type=raw,value=ort-sha-${{ env.ORT_SHA }}
            type-raw,value=latest

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Reformat digest for use in names
        run: |
          echo "DIGEST=${{ steps.build.outputs.digest }}" >> $GITHUB_ENV
          echo "REFORMATTED_DIGEST=`echo ${{ steps.build.outputs.digest }} | sed s/:/-/`" >> $GITHUB_ENV

      - name: Install Tern
        run: |
          sudo apt install git attr python3 python3-pip jq skopeo
          sudo pip install pipx
          pipx install tern

      - name: Save container as a tar archive for local scanning
        run: docker save -o ${{ github.event.repository.name }}.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.DIGEST }}

      - name: Run Tern
        run: tern report -d Dockerfile -o tern-analysis-${{ env.DATE }}-${{ env.REFORMATTED_DIGEST }}.txt -w ${{ github.event.repository.name }}.tar

      - name: Store results
        uses: actions/upload-artifact@v3
        with:
          name: tern-output-$${{ env.DATE }}-${{ env.REFORMATTED_DIGEST }}
          path: ${{ github.workspace }}/tern-analysis-${{ env.DATE }}-${{ env.REFORMATTED_DIGEST }}.txt

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:digest-${{ env.REFORMATTED_DIGEST }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:builder-sha-${{ env.REPO_SHA }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ort-sha-${{ env.ORT_SHA }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:date-${{ env.DATE }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
